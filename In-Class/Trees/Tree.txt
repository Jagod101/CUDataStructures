Trees
- consists of nodes with a parent-child relationship

Tree Terminology
- Root: node without a parent
- Internal nodes: node with at least one child
- External nodes (leaf): a node with no children
- Depth of a node: number of ancestors
- Height: max depth of any node

Binary Search Tree (BST)
- a tree that allows for efficent sorting and searching
    1) insert

Rules of BST
- Each node (vertex) must have exactly one path (edge) to another node
    1) If it doesn't, then it's a graph
- Each node consists of a key value
    1) Key to sort
- Data entries are sorted
    1) Values smaller than the root, go left
    2) Values greater than the root, go right
- Internal: node that has two children
- External: one or fewer children
    1) leaf = no children
- Node Degree: the number of children of a given node

Balance/Unbalanced Trees
- A tree is "perfectly" height-balanced if the left and right subtrees of any node are the same height
    1) A tree is balanced if the height of the left and right is within 1

Tree Traversal
- In-Order
- Pre-Order
- Post-Order

In Order Traversal
- A node is visited after it's left subtree and before it's right subtree
- Print the nodes of a tree

- Example Code: 
    inOrder(TreeNode* n) {
        if(n != NULL) {
            inOrder(n->left);
            cout << n->key << n->data << endl;
            inOrder(n->right);
        }
    }

Pre Order Traversal
- A node is visited BEFORE it's descendants or children
- Print some structured document 

- Example Code: 
    preOrder(TreeNode* n) {
        if(n != NULL) {
            cout << n->key << n->data << endl;
            preOrder(n->left);
            preOrder(n->right);
        }
    }

Post Order Traversal
- A node is visited AFTER it's descendants or children
- Print some directories/sub-directories

- Example Code: 
    postOrder(TreeNode* n) {
        if(n != NULL) {
            postOrder(n->left);
            postOrder(n->right);
            cout << n->key << n->data << endl;
        }
    }


Psuedo Code Examples for Tree Traversal: 

Get Minimum Value in a Tree
    getMin() {
        TreeNode c = root;
        while(c->left != NULL) {
            c = c->left;
        }

        return c;
    }

Get Maximum Value in a Tree
    getMax() {
        TreeNode c = root;
        while(c->right != NULL) {
            c = c->right;
        }

        return c;
    }

Insert a Value into a Tree (a "failed search")
1) Create a New Node (leaf)
2) Evaluate wheter it is greater than or less than the root
    a) Determine left or right
3) Once you reach a Leaf Node, found the location